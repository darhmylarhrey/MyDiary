{"version":3,"sources":["../../server/controller/entries.js"],"names":["EntriesController","welcome","req","res","status","json","create","title","entry","body","newEntry","entryId","GUID","date","time","entries","push","message","deleteEntry","params","entryFound","find","splice","indexOf","getEntry","getAllEntries","_req","update","entryItem","index","updatedEntry"],"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","file":"entries.js","sourcesContent":["import { date, time } from '../utils/moment';\r\nimport entries from '../model/db';\r\nimport GUID from '../utils/guid';\r\n\r\n/**\r\n * @exports\r\n * @class DriverController\r\n */\r\nclass EntriesController {\r\n  /**\r\n   * Welcome page\r\n   * @staticmethod\r\n   * @param {object} req - Request object\r\n   * @param {object} res - Response object\r\n   * @return {json} res.json\r\n   */\r\n  static welcome(req, res) {\r\n    return res.status(200).json('Welcome to My Diary app');\r\n  }\r\n\r\n  /**\r\n   * Creates a new entry\r\n   * @staticmethod\r\n   * @param  {object} req - Request object\r\n   * @param {object} res - Response object\r\n   * @return {json} res.json\r\n   */\r\n  static create(req, res) {\r\n    const { title, entry } = req.body;\r\n\r\n    const newEntry = { entryId: GUID, title, entry, date, time };\r\n\r\n    // adds the new entry to the database\r\n    entries.push(newEntry);\r\n\r\n    return res.status(201).json({\r\n      message: 'Entry added successfully',\r\n      newEntry,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Deletes an entry\r\n   *\r\n   * @staticmethod\r\n   * @param  {object} req - Request object\r\n   * @param {object} res - Response object\r\n   * @return {json} res.json\r\n   */\r\n  static deleteEntry(req, res) {\r\n    const { entryId } = req.params;\r\n\r\n    // check if entry exists\r\n    const entryFound = entries.find(entry => entry.entryId === entryId);\r\n\r\n    // If entry does not exist...\r\n    if (!entryFound) {\r\n      return res.status(404).json({\r\n        message: 'Entry not found',\r\n      });\r\n    }\r\n\r\n    // if entry exists...\r\n    entries.splice(entries.indexOf(entryFound), 1);\r\n    return res.status(204).json();\r\n  }\r\n\r\n  /**\r\n   * Return entry that matches entryId\r\n   *\r\n   * @staticmethod\r\n   * @param  {object} req - Request object\r\n   * @param {object} res - Response object\r\n   * @param {function} next - middleware next (for error handling)\r\n   * @return {json} res.json\r\n   */\r\n  static getEntry(req, res) {\r\n    const { entryId } = req.params;\r\n\r\n    // find entry with params entryId\r\n    const entryFound = entries.find(entry => entry.entryId === entryId);\r\n\r\n    // if entry does not exist...\r\n    if (!entryFound) {\r\n      return res.status(404).json({\r\n        message: 'Entry does not exist',\r\n      });\r\n    }\r\n\r\n    // if diary entry exists...\r\n    return res.status(200).json({\r\n      message: 'Entry was found',\r\n      entryFound,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get all diary entries\r\n   *\r\n   * @staticmethod\r\n   * @param  {object} req - Request object\r\n   * @param {object} res - Response object\r\n   * @return {json} res.json\r\n   */\r\n  static getAllEntries(_req, res) {\r\n    res.status(200).json({\r\n      message: 'Entries retrieved successfully',\r\n      entries,\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Update an existing entry\r\n   *\r\n   * @staticmethod\r\n   * @param  {object} req - Request object\r\n   * @param {object} res - Response object\r\n   * @return {json} res.json\r\n   */\r\n  static update(req, res) {\r\n    const { entryId } = req.params;\r\n    const { title, entry} = req.body;\r\n\r\n    // find entry with params entryId\r\n    const entryFound = entries.find(entryItem => entryItem.entryId === entryId);\r\n\r\n    // if entry does not exist...\r\n    if (!entryFound) return res.status(404).json({ message: 'Entry does not exist' });\r\n\r\n    // Get index of entry\r\n    const index = entries.indexOf(entryFound);\r\n\r\n    const updatedEntry = {\r\n      entryId, title, entry, date, time,\r\n    };\r\n\r\n    // Replace entry with the updated entry\r\n    entries.splice(index, 1, updatedEntry);\r\n    return res.status(201).json({\r\n      message: 'Entry modified successfully',\r\n      updatedEntry,\r\n    });\r\n  }\r\n}\r\n\r\nexport default EntriesController;\r\n"]}