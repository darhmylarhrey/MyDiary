{"version":3,"sources":["../../server/test/diary-test.js"],"names":["chai","should","use","chaiHttp","done","request","app","get","end","err","res","statusCode","to","equal","body","be","a","newEntry","entryId","GUID","title","entry","date","time","post","send","include","keys","have","property","eql","updatedEntry","put","entryFound","delete"],"mappings":"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","file":"diary-test.js","sourcesContent":["import { describe, it } from 'mocha';\r\n\r\n// import chaiAsPromised from 'chai-as-promised';\r\nimport chai, { expect } from 'chai';\r\nimport chaiHttp from 'chai-http';\r\n\r\nimport GUID from '../utils/guid';\r\nimport { date, time } from '../utils/moment';\r\nimport app from '../app';\r\n\r\n// chai.use(chaiAsPromised)\r\nchai.should();\r\n\r\n chai.use(chaiHttp);\r\n\r\n describe('Tests for My Diary API endpoints', () => {\r\n  describe('GET api/v1', () => {\r\n    it('should display a welcome page', (done) => {\r\n      chai.request(app)\r\n        .get('/api/v1')\r\n        .end((err, res) => {\r\n          expect(res.statusCode).to.equal(200);\r\n          res.body.should.be.a('string');\r\n          if (err) return done(err);\r\n          done();\r\n        });\r\n    });\r\n  });\r\n\r\n  describe('Handles valid endpoints for entries', () => {\r\n    describe('POST api/v1/entries', () => {\r\n      it('should add an entry', (done) => {\r\n        const newEntry = {\r\n          entryId: GUID,\r\n          title: 'Hello World!',\r\n          entry: 'This is a valid test',\r\n          date,\r\n          time,\r\n        };\r\n        chai.request(app)\r\n          .post('/api/v1/entries')\r\n          .send(newEntry)\r\n          .end((err, res) => {\r\n            expect(res.statusCode).to.equal(201);\r\n            expect(res.body.newEntry).to.include.keys('entryId');\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('message').eql('Entry added successfully');\r\n            res.body.should.have.property('newEntry').eql(newEntry);\r\n            if (err) return done(err);\r\n            done();\r\n          });\r\n      });\r\n    });\r\n\r\n    describe('PUT api/v1/entries/:entryId', () => {\r\n      it('should modify an entry', (done) => {\r\n        const updatedEntry = {\r\n          entryId: '1',\r\n          title: 'Hello World!',\r\n          entry: 'This is a valid test',\r\n          date,\r\n          time,\r\n        };\r\n        chai.request(app)\r\n          .put('/api/v1/entries/1')\r\n          .send(updatedEntry)\r\n          .end((err, res) => {\r\n            expect(res.statusCode).to.equal(201);\r\n            expect(res.body.updatedEntry).to.include.keys('entryId');\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('message').eql('Entry modified successfully');\r\n            res.body.should.have.property('updatedEntry').eql(updatedEntry);\r\n            if (err) return done(err);\r\n            done();\r\n          });\r\n      });\r\n    });\r\n\r\n    describe('GET api/v1/entries/:entryId', () => {\r\n      it('should return an entry', (done) => {\r\n        chai.request(app)\r\n          .get('/api/v1/entries/2')\r\n          .end((err, res) => {\r\n            expect(res.statusCode).to.equal(200);\r\n            expect(res.body.entryFound).to.include.keys('entryId');\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('message').eql('Entry was found');\r\n            res.body.should.have.property('entryFound');\r\n            if (err) return done(err);\r\n            done();\r\n          });\r\n      });\r\n    });\r\n\r\n    describe('GET api/v1/entries', () => {\r\n      it('should get all entries', (done) => {\r\n        chai.request(app)\r\n          .get('/api/v1/entries')\r\n          .end((err, res) => {\r\n            expect(res.body).to.include.keys('entries');\r\n            expect(res.statusCode).to.equal(200);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('message').eql('Entries retrieved successfully');\r\n            res.body.should.have.property('entries');\r\n            if (err) return done(err);\r\n            done();\r\n          });\r\n      });\r\n    });\r\n\r\n    describe('DELETE api/v1/entries/:entryId', () => {\r\n      it('should delete selected ride offer option', (done) => {\r\n        chai.request(app)\r\n          .delete('/api/v1/entries/3')\r\n          .end((err, res) => {\r\n            expect(res.statusCode).to.equal(204);\r\n            if (err) return done(err);\r\n            done();\r\n          });\r\n      });\r\n    });\r\n  });\r\n\r\n   describe('Handles invalid endpoints for entries', () => {\r\n     //describe('POST api/v1/entries', () => {\r\n       // it('should return an error message to check entry input', (done) => {\r\n      //   const newEntry = {\r\n      //     id: GUID,\r\n      //     entry: 'This is an invalid test',\r\n      //     date,\r\n      //     time,\r\n      //   };\r\n      //   chai.request(app)\r\n      //     .post('/api/v1/entries')\r\n      //     .send(newEntry)\r\n      //     .end((err, res) => {\r\n      //       expect(res.statusCode).to.equal(400);\r\n      //       res.body.should.be.a('object');\r\n      //       res.body.should.have.property('message').eql('Valid title and entry data is required');\r\n      //       if (err) return done(err);\r\n      //       done();\r\n      //     });\r\n      // });\r\n\r\n      // it('should return an error message to check input fields', (done) => {\r\n      //   const newEntry = {\r\n      //     id: GUID,\r\n      //     title: 'Invalid endpoint',\r\n      //     date,\r\n      //     time,\r\n      //   };\r\n      //   chai.request(app)\r\n      //     .post('/api/v1/entries')\r\n      //     .send(newEntry)\r\n      //     .end((err, res) => {\r\n      //       expect(res.statusCode).to.equal(400);\r\n      //       res.body.should.be.a('object');\r\n      //       res.body.should.have.property('message').eql('Valid title and entry data is required');\r\n      //       if (err) return done(err);\r\n      //       done();\r\n      //     });\r\n      // });\r\n    //});\r\n\r\n    describe('PUT api/v1/entries/:entryId', () => {\r\n      // it('should return an error message to check entry input', (done) => {\r\n      //   const updatedEntry = {\r\n      //     id: '1',\r\n      //     entry: 'This is an invalid test',\r\n      //     date,\r\n      //     time,\r\n      //   };\r\n      //   chai.request(app)\r\n      //     .put('/api/v1/entries/2')\r\n      //     .send(updatedEntry)\r\n      //     .end((err, res) => {\r\n      //       expect(res.statusCode).to.equal(400);\r\n      //       res.body.should.be.a('object');\r\n      //       res.body.should.have.property('message').eql('Valid title and entry data is required');\r\n      //       if (err) return done(err);\r\n      //       done();\r\n      //     });\r\n      // });\r\n\r\n      // it('should return an error message to check input fields', (done) => {\r\n      //   const updatedEntry = {\r\n      //     id: '1',\r\n      //     title: 'Invalid endpoint',\r\n      //     date,\r\n      //     time,\r\n      //   };\r\n      //   chai.request(app)\r\n      //     .put('/api/v1/entries/1')\r\n      //     .send(updatedEntry)\r\n      //     .end((err, res) => {\r\n      //       expect(res.statusCode).to.equal(400);\r\n      //       res.body.should.be.a('object');\r\n      //       res.body.should.have.property('message').eql('Valid title and entry data is required');\r\n      //       if (err) return done(err);\r\n      //       done();\r\n      //     });\r\n      // });\r\n\r\n      it('should return an error message for an entry that does not exist', (done) => {\r\n        const updatedEntry = {\r\n          entryId: '3',\r\n          title: 'Hello World!',\r\n          entry: 'This should not valid test',\r\n          date,\r\n          time,\r\n        };\r\n        chai.request(app)\r\n          .put('/api/v1/entries/3')\r\n          .send(updatedEntry)\r\n          .end((err, res) => {\r\n            expect(res.statusCode).to.equal(404);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('message').eql('Entry does not exist');\r\n            if (err) return done(err);\r\n            done();\r\n          });\r\n      });\r\n    });\r\n\r\n    describe('GET api/v1/entries/:entryId', () => {\r\n      it('should return an error message for an entry that does not exist', (done) => {\r\n        chai.request(app)\r\n          .get('/api/v1/rides/1')\r\n          .end((err, res) => {\r\n            expect(res.statusCode).to.equal(404);\r\n            res.body.should.be.a('object');\r\n            if (err) return done(err);\r\n            done();\r\n          });\r\n      });\r\n    });\r\n\r\n    describe('DELETE api/v1/entries/:entryId', () => {\r\n      it('should return error if selected entry id does not exist', (done) => {\r\n        chai.request(app)\r\n          .delete('/api/v1/entries/8')\r\n          .end((err, res) => {\r\n            expect(res.statusCode).to.equal(404);\r\n            res.body.should.be.a('object');\r\n            res.body.should.have.property('message').eql('Entry not found');\r\n            if (err) return done(err);\r\n            done();\r\n          });\r\n      });\r\n    });\r\n  });\r\n});\r\n"]}